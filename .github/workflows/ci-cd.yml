name: HMS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKERHUB_USERNAME: dilshan019
  SERVER_HOST: 13.53.135.196
  SERVER_USER: ubuntu
  
jobs:
  # Job 1: Code Quality & Tests
  quality-tests:
    runs-on: ubuntu-latest
    name: Code Quality & Tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: hms_test
          MYSQL_USER: hmsuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Frontend Quality Checks
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    # - name: Frontend Lint Check
    #   working-directory: ./frontend
    #   run: npm run lint

    # - name: Frontend Type Check
    #   working-directory: ./frontend
    #   run: npx tsc --noEmit

    # - name: Frontend Tests
    #   working-directory: ./frontend
    #   run: npm test -- --coverage --watchAll=false

    - name: Frontend Build
      working-directory: ./frontend
      run: npm run build

    # Backend Quality Checks
    - name: Wait for MySQL to be ready
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Attempt $i: MySQL not ready yet, waiting..."
          sleep 2
        done

    - name: Setup Test Database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS hms_test;"
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "GRANT ALL PRIVILEGES ON hms_test.* TO 'hmsuser'@'%';"
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "FLUSH PRIVILEGES;"

    - name: Make Maven Wrapper Executable
      working-directory: ./HMS
      run: chmod +x ./mvnw

    - name: Backend Compile Check
      working-directory: ./HMS
      run: ./mvnw compile

    - name: Backend Tests
      working-directory: ./HMS
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/hms_test
        SPRING_DATASOURCE_USERNAME: hmsuser
        SPRING_DATASOURCE_PASSWORD: testpassword
      run: ./mvnw test

    - name: Generate Backend Test Report
      working-directory: ./HMS
      run: ./mvnw surefire-report:report

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          HMS/target/surefire-reports/
          frontend/coverage/
        if-no-files-found: warn

  # Job 2: Build and Push Docker Images
  build-images:
    needs: quality-tests
    runs-on: ubuntu-latest
    name: Build & Push Docker Images
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./HMS
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/hms-backend:latest
          ${{ env.DOCKERHUB_USERNAME }}/hms-backend:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/hms-frontend:latest
          ${{ env.DOCKERHUB_USERNAME }}/hms-frontend:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to Production
  deploy:
    needs: build-images
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "üöÄ Starting HMS deployment..."
          
          # Ensure the Docker network exists
          echo "Checking Docker network..."
          docker network inspect hms-network >/dev/null 2>&1 || docker network create hms-network
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker stop hms-frontend hms-backend || true
          docker rm hms-frontend hms-backend || true
          
          # Ensure database container is on the network
          echo "Connecting existing database to HMS network..."
          docker network connect hms-network hms-database || echo "Database already connected to network or network connection failed"
          
          # Pull latest images
          echo "Pulling latest Docker images..."
          docker pull ${{ env.DOCKERHUB_USERNAME }}/hms-backend:latest
          docker pull ${{ env.DOCKERHUB_USERNAME }}/hms-frontend:latest
          
          # Start backend container
          echo "Starting backend container..."
          docker run -d \
            --name hms-backend \
            --network hms-network \
            -e SPRING_PROFILES_ACTIVE=production \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://hms-database:3306/hms \
            -e SPRING_DATASOURCE_USERNAME=hmsuser \
            -e SPRING_DATASOURCE_PASSWORD=SecurePassword123! \
            -p 8080:8080 \
            --restart unless-stopped \
            ${{ env.DOCKERHUB_USERNAME }}/hms-backend:latest
          
          # Start frontend container
          echo "Starting frontend container..."
          docker run -d \
            --name hms-frontend \
            --network hms-network \
            -p 80:80 \
            -p 443:443 \
            --restart unless-stopped \
            ${{ env.DOCKERHUB_USERNAME }}/hms-frontend:latest
          
          # Clean up old images
          echo "Cleaning up old Docker images..."
          docker image prune -f
          
          echo "‚úÖ HMS deployment completed successfully!"

    - name: Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "üîç Verifying deployment..."
          
          # Check container status
          echo "Container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Wait for containers to be healthy
          echo "Waiting for containers to start..."
          sleep 45
          
          # Backend health check with retries
          echo "Testing backend health..."
          for i in {1..10}; do
            if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ Backend health check passed (attempt $i)"
              backend_healthy=true
              break
            else
              echo "‚è≥ Backend not ready yet (attempt $i/10), waiting 15 seconds..."
              sleep 15
            fi
          done
          
          if [ "$backend_healthy" != "true" ]; then
            echo "‚ùå Backend health check failed after 10 attempts"
            echo "Backend logs:"
            docker logs hms-backend --tail 50
            exit 1
          fi
          
          # Frontend health check with retries
          echo "Testing frontend health..."
          for i in {1..5}; do
            if curl -f -s http://localhost/ > /dev/null 2>&1; then
              echo "‚úÖ Frontend health check passed (attempt $i)"
              frontend_healthy=true
              break
            else
              echo "‚è≥ Frontend not ready yet (attempt $i/5), waiting 10 seconds..."
              sleep 10
            fi
          done
          
          if [ "$frontend_healthy" != "true" ]; then
            echo "‚ùå Frontend health check failed after 5 attempts"
            echo "Frontend logs:"
            docker logs hms-frontend --tail 50
            exit 1
          fi
          
          echo "üéâ All health checks passed! HMS is live at http://nindt.duckdns.org"

  # Job 4: Notification
  notify:
    needs: [quality-tests, build-images, deploy]
    runs-on: ubuntu-latest
    name: Send Notifications
    if: always()

    steps:
    - name: Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ HMS CI/CD Pipeline completed successfully!"
          echo "‚úÖ Application deployed to: http://nindt.duckdns.org"
          echo "‚úÖ All quality checks passed"
          echo "‚úÖ Docker images updated"
        else
          echo "‚ùå HMS CI/CD Pipeline failed"
          echo "Please check the workflow logs for details"
        fi