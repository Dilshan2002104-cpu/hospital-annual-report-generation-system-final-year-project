services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: hms-database
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: hms
      MYSQL_USER: hmsuser
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-SecurePassword123!}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-RootPassword123!}
    # Note: MySQL port not exposed externally for security
    # ports:
    #   - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend Service (using pre-built image)
  backend:
    image: dilshan019/hms-backend:latest
    container_name: hms-backend
    restart: unless-stopped
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/hms
      SPRING_DATASOURCE_USERNAME: hmsuser
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-SecurePassword123!}
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      
      # Server configuration
      SERVER_PORT: 8080
      SERVER_ADDRESS: 0.0.0.0
      
      # Logging
      LOGGING_LEVEL_ROOT: WARN
      
      # Profile
      SPRING_PROFILES_ACTIVE: production
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Service (using pre-built image)
  frontend:
    image: dilshan019/hms-frontend:latest
    container_name: hms-frontend
    restart: unless-stopped
    environment:
      # Configure API URL to point to the EC2 instance
      REACT_APP_API_URL: http://16.171.66.213:8080
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mysql_data:
    driver: local

networks:
  hms-network:
    driver: bridge
